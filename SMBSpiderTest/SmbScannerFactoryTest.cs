// <auto-generated />
using SMBSpider;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;

namespace SMBSpiderTest
{
    
    
    /// <summary>
    ///Dies ist eine Testklasse für "SmbScannerFactoryTest" und soll
    ///alle SmbScannerFactoryTest Komponententests enthalten.
    ///</summary>
    [TestClass()]
    public class SmbScannerFactoryTest
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Ruft den Testkontext auf, der Informationen
        ///über und Funktionalität für den aktuellen Testlauf bietet, oder legt diesen fest.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }

        #region Zusätzliche Testattribute
        // 
        //Sie können beim Verfassen Ihrer Tests die folgenden zusätzlichen Attribute verwenden:
        //
        //Mit ClassInitialize führen Sie Code aus, bevor Sie den ersten Test in der Klasse ausführen.
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Mit ClassCleanup führen Sie Code aus, nachdem alle Tests in einer Klasse ausgeführt wurden.
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Mit TestInitialize können Sie vor jedem einzelnen Test Code ausführen.
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Mit TestCleanup können Sie nach jedem einzelnen Test Code ausführen.
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///Ein Test für "CreateFromArguments"
        ///</summary>
        [TestMethod()]
        public void SingleAddressScannerFactoryTest()
        {
            string[] args = { "ip", "127.0.0.1"};
            SmbScanner scanner = SmbScannerFactory.CreateFromArguments(args);
            Assert.IsTrue(scanner.Addresses.Length == 1);
            Assert.AreEqual(scanner.Addresses[0].ToString(), "127.0.0.1");
            Assert.IsInstanceOfType(scanner.ResultHandler, typeof(ListResultHandler));
        }

        [TestMethod()]
        public void AddressRangeScannerFactoryTest()
        {
            string[] args = { "range", "192.168.0.1/24" };
            SmbScanner scanner = SmbScannerFactory.CreateFromArguments(args);
            Assert.IsTrue(scanner.Addresses.Length == 256);
        }

        [TestMethod()]
        public void SaveResultsScannerFactoryTest() {
            string[] args = { "ip", "127.0.0.1", "-o", "C://Test/" };
            SmbScanner scanner = SmbScannerFactory.CreateFromArguments(args);
            Assert.IsInstanceOfType(scanner.ResultHandler, typeof(ResultHandlerComposition));
            ResultHandlerComposition composition = scanner.ResultHandler as ResultHandlerComposition;
            Assert.IsInstanceOfType(composition.Components[0], typeof(ListResultHandler));
            Assert.IsInstanceOfType(composition.Components[1], typeof(CopyResultHandler));
        }

        [TestMethod()]
        public void FileFilterScannerFactoryTest() 
        {
            string[] args = { "ip", "127.0.0.1", "-if", "[a-z]*.mp3"};
            SmbScanner scanner = SmbScannerFactory.CreateFromArguments(args);
            Assert.IsInstanceOfType(scanner.ResultHandler, typeof(ListResultHandler));
            Assert.IsInstanceOfType(scanner.Searcher, typeof(InclusiveRegexSearcher));
        }

        [TestMethod()]
        public void DirFilterScannerFactoryTest()
        {
            string[] args = { "ip", "127.0.0.1", "-ef", "$printer"};
            SmbScanner scanner = SmbScannerFactory.CreateFromArguments(args);
            Assert.IsInstanceOfType(scanner.ResultHandler, typeof(ListResultHandler));
            Assert.IsInstanceOfType(scanner.Searcher, typeof(ExclusiveRegexSearcher));
        }

        [TestMethod()]
        public void VerboseFactoryTest()
        {
            string[] args = { "ip", "127.0.0.1", "-v" };
            Assert.IsFalse(Config.VERBOSE);
            SmbScanner scanner = SmbScannerFactory.CreateFromArguments(args);
            Assert.IsTrue(Config.VERBOSE);
        }

        [TestMethod()]
        public void ArgumentExceptionTest()
        {
            try
            {
                SmbScannerFactory.CreateFromArguments(new string[] { string.Empty });
                Assert.Fail();
            }
            catch (ArgumentException) { }

            try
            {
                SmbScannerFactory.CreateFromArguments(new string[] { "-i" });
                Assert.Fail();
            }
            catch (ArgumentException) { }
        }
    }
}
