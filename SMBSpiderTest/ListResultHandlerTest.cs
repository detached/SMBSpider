//<auto-generated />
using SMBSpider;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.IO;

namespace SMBSpiderTest
{
    
    
    /// <summary>
    /// Dies ist eine Testklasse für "ListResultHandlerTest" und soll
    /// alle ListResultHandlerTest Komponententests enthalten.
    ///</summary>
    [TestClass()]
    public class ListResultHandlerTest
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Ruft den Testkontext auf, der Informationen
        ///über und Funktionalität für den aktuellen Testlauf bietet, oder legt diesen fest.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }

        #region Zusätzliche Testattribute
        // 
        //Sie können beim Verfassen Ihrer Tests die folgenden zusätzlichen Attribute verwenden:
        //
        //Mit ClassInitialize führen Sie Code aus, bevor Sie den ersten Test in der Klasse ausführen.
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Mit ClassCleanup führen Sie Code aus, nachdem alle Tests in einer Klasse ausgeführt wurden.
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Mit TestInitialize können Sie vor jedem einzelnen Test Code ausführen.
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Mit TestCleanup können Sie nach jedem einzelnen Test Code ausführen.
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///Ein Test für "HandleResult"
        ///</summary>
        [TestMethod()]
        public void ListHandleResultTest()
        {
            MemoryStream buffer = new MemoryStream();
            using (StreamWriter writer = new StreamWriter(buffer))
            {
                Console.SetOut(writer);
                string[] testStrings = { "//TestPC/Testshare/", "//TestPC/Testshare/TestFile.txt", "//TestPC/Testshare/Subdir/", "//AnotherPC/Testshare/" };
                ListResultHandler handler = new ListResultHandler();

                foreach (string test in testStrings)
                {
                    handler.HandleResult(test);
                    writer.Flush();
                }

                buffer.Seek(0, SeekOrigin.Begin);

                TextReader reader = new StreamReader(buffer);
                foreach (string test in testStrings)
                {
                    Assert.AreEqual(test, reader.ReadLine());
                }
            }
        }
    }
}
