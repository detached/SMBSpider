//<auto-generated />
using SMBSpider;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.IO;
using System.Collections.Generic;
using System.Security.Cryptography;
using System.Linq;

namespace SMBSpiderTest
{
    
    
    /// <summary>
    ///Dies ist eine Testklasse für "CopyResultHandlerTest" und soll
    ///alle CopyResultHandlerTest Komponententests enthalten.
    ///</summary>
    [TestClass()]
    public class CopyResultHandlerTest
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Ruft den Testkontext auf, der Informationen
        ///über und Funktionalität für den aktuellen Testlauf bietet, oder legt diesen fest.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }

        #region Zusätzliche Testattribute
        // 
        //Sie können beim Verfassen Ihrer Tests die folgenden zusätzlichen Attribute verwenden:
        //
        //Mit ClassInitialize führen Sie Code aus, bevor Sie den ersten Test in der Klasse ausführen.
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Mit ClassCleanup führen Sie Code aus, nachdem alle Tests in einer Klasse ausgeführt wurden.
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Mit TestInitialize können Sie vor jedem einzelnen Test Code ausführen.
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Mit TestCleanup können Sie nach jedem einzelnen Test Code ausführen.
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion

        private string testShare = "\\\\127.0.0.1\\temp\\";
        private string localDir = "C:\\temp\\";
        private string destination = ".\\destination\\";

        /// <summary>
        ///Ein Test für "HandleResult"
        ///</summary>
        [TestMethod()]
        public void CopyHandleResultTest()
        {
            var shareList = Directory.EnumerateFileSystemEntries(testShare, "*", SearchOption.AllDirectories);
            var localList = Directory.EnumerateFileSystemEntries(localDir, "*", SearchOption.AllDirectories);

            var handler = new CopyResultHandler(destination);

            foreach (string test in shareList)
            {
                handler.HandleResult(test);
            }

            var destinationList = Directory.EnumerateFileSystemEntries(Path.Combine(destination, "127.0.0.1", "temp"), "*", SearchOption.AllDirectories);

            Assert.IsTrue(destinationList.Count() == localList.Count());

            MD5 md5 = new MD5CryptoServiceProvider();

            localList.ToList().ForEach(
                ld =>
                {
                    var localAttributes = File.GetAttributes(ld);
                    if ((localAttributes & FileAttributes.Directory) != FileAttributes.Directory)
                    {
                        Assert.IsTrue(
                            md5.ComputeHash(File.ReadAllBytes(ld)).SequenceEqual(
                            md5.ComputeHash(File.ReadAllBytes(destinationList.Single(dd => Path.GetFileName(dd).Equals(Path.GetFileName(ld)))))));
                    }
                });
        }

        [TestCleanup()]
        public void RemoveFiles()
        {
            if (Directory.Exists(this.destination))
            {
                Directory.Delete(this.destination, true);
            }
        }
    }
}
